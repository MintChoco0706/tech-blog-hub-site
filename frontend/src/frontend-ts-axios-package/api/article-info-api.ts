/* tslint:disable */
/* eslint-disable */
/**
 * tech blog hub site의 API
 * 카테고리, 회사, 검색어를 기반으로 한 검색 API (페이징 지원)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiResult } from '../model';
// @ts-ignore
import { SearchResponse } from '../model';
/**
 * ArticleInfoApi - axios parameter creator
 * @export
 */
export const ArticleInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 카테고리, 회사, 검색어를 기반으로 검색을 수행합니다. 페이징을 지원합니다.
         * @summary 검색 수행
         * @param {string} [xUserId] Local storage에 저장된 UUID v4 형식의 사용자 식별자 (로깅용)
         * @param {Array<string>} [hashtags] 검색할 카테고리 목록 (선택사항, 쉼표로 구분, 최대 10개, 각 원소는 최대 15자, 알파벳, /만 허용)
         * @param {string} [company] 검색할 회사 이름 (선택사항, 최대 10자, 알파벳, 한글, 숫자 허용)
         * @param {string} [query] 검색어 (선택사항, 최대 15자, 한국어, 영어, 숫자, 띄어쓰기만 허용)
         * @param {number} [page] 페이지 번호 (0부터 시작, 기본값 0)
         * @param {number} [size] 페이지 당 결과 수 (기본값 10, 최대 30)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleInfos: async (xUserId?: string, hashtags?: Array<string>, company?: string, query?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/article-infos/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hashtags) {
                localVarQueryParameter['hashtags'] = hashtags.join(COLLECTION_FORMATS.csv);
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xUserId != null) {
                localVarHeaderParameter['X-User-Id'] = String(xUserId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleInfoApi - functional programming interface
 * @export
 */
export const ArticleInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 카테고리, 회사, 검색어를 기반으로 검색을 수행합니다. 페이징을 지원합니다.
         * @summary 검색 수행
         * @param {string} [xUserId] Local storage에 저장된 UUID v4 형식의 사용자 식별자 (로깅용)
         * @param {Array<string>} [hashtags] 검색할 카테고리 목록 (선택사항, 쉼표로 구분, 최대 10개, 각 원소는 최대 15자, 알파벳, /만 허용)
         * @param {string} [company] 검색할 회사 이름 (선택사항, 최대 10자, 알파벳, 한글, 숫자 허용)
         * @param {string} [query] 검색어 (선택사항, 최대 15자, 한국어, 영어, 숫자, 띄어쓰기만 허용)
         * @param {number} [page] 페이지 번호 (0부터 시작, 기본값 0)
         * @param {number} [size] 페이지 당 결과 수 (기본값 10, 최대 30)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleInfos(xUserId?: string, hashtags?: Array<string>, company?: string, query?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticleInfos(xUserId, hashtags, company, query, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleInfoApi.getArticleInfos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArticleInfoApi - factory interface
 * @export
 */
export const ArticleInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleInfoApiFp(configuration)
    return {
        /**
         * 카테고리, 회사, 검색어를 기반으로 검색을 수행합니다. 페이징을 지원합니다.
         * @summary 검색 수행
         * @param {string} [xUserId] Local storage에 저장된 UUID v4 형식의 사용자 식별자 (로깅용)
         * @param {Array<string>} [hashtags] 검색할 카테고리 목록 (선택사항, 쉼표로 구분, 최대 10개, 각 원소는 최대 15자, 알파벳, /만 허용)
         * @param {string} [company] 검색할 회사 이름 (선택사항, 최대 10자, 알파벳, 한글, 숫자 허용)
         * @param {string} [query] 검색어 (선택사항, 최대 15자, 한국어, 영어, 숫자, 띄어쓰기만 허용)
         * @param {number} [page] 페이지 번호 (0부터 시작, 기본값 0)
         * @param {number} [size] 페이지 당 결과 수 (기본값 10, 최대 30)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleInfos(xUserId?: string, hashtags?: Array<string>, company?: string, query?: string, page?: number, size?: number, options?: any): AxiosPromise<SearchResponse> {
            return localVarFp.getArticleInfos(xUserId, hashtags, company, query, page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleInfoApi - object-oriented interface
 * @export
 * @class ArticleInfoApi
 * @extends {BaseAPI}
 */
export class ArticleInfoApi extends BaseAPI {
    /**
     * 카테고리, 회사, 검색어를 기반으로 검색을 수행합니다. 페이징을 지원합니다.
     * @summary 검색 수행
     * @param {string} [xUserId] Local storage에 저장된 UUID v4 형식의 사용자 식별자 (로깅용)
     * @param {Array<string>} [hashtags] 검색할 카테고리 목록 (선택사항, 쉼표로 구분, 최대 10개, 각 원소는 최대 15자, 알파벳, /만 허용)
     * @param {string} [company] 검색할 회사 이름 (선택사항, 최대 10자, 알파벳, 한글, 숫자 허용)
     * @param {string} [query] 검색어 (선택사항, 최대 15자, 한국어, 영어, 숫자, 띄어쓰기만 허용)
     * @param {number} [page] 페이지 번호 (0부터 시작, 기본값 0)
     * @param {number} [size] 페이지 당 결과 수 (기본값 10, 최대 30)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleInfoApi
     */
    public getArticleInfos(xUserId?: string, hashtags?: Array<string>, company?: string, query?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ArticleInfoApiFp(this.configuration).getArticleInfos(xUserId, hashtags, company, query, page, size, options).then((request) => request(this.axios, this.basePath));
    }
}

