input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
    ssl_certificate => "/usr/share/logstash/config/certs/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash.key"
    ssl_verify_mode => "force_peer"
  }
}

filter {
  if [fields][application] == "crawler" {
    json {
      source => "message"
    }
    date {
      match => [ "time", "ISO8601" ]
      target => "@timestamp"
    }
    mutate {
      remove_field => [ "message" ]
    }
  }
  else if [fields][application] == "spring-backend" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:log_level} %{DATA:logger} - %{GREEDYDATA:log_message}" }
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
    if [log_message] =~ "User ID:" {
      grok {
        match => { "log_message" => "User ID: %{UUID:user_id}\.?\s*%{GREEDYDATA:request_details}" }
      }
      if [request_details] =~ "Request:" {
        grok {
          match => { "request_details" => "Request:\s*%{WORD:http_method}\s+%{DATA:endpoint}" }
        }
      }
      if [request_details] =~ "Response:" {
        grok {
          match => { "request_details" => "Response: %{WORD:http_method} %{DATA:endpoint} \(%{NUMBER:response_time:float}ms\)" }
        }
      }
    }
    mutate {
      remove_field => [ "timestamp" ]
    }
  }
}


output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTICSEARCH_USERNAME}"
    password => "${ELASTICSEARCH_PASSWORD}"
    ssl => true
    ssl_certificate_verification => true
    cacert => "/usr/share/logstash/config/certs/ca.crt"
    # index => "%{[fields][application]}-%{+YYYY.MM.dd}"
    index => "%{[fields][application]}-log"
  }
  stdout { codec => rubydebug }
}