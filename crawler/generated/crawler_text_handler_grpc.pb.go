// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0--rc3
// source: crawler_text_handler.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrawlerTextHandler_StreamUrlSummaries_FullMethodName = "/CrawlerTextHandler/StreamUrlSummaries"
)

// CrawlerTextHandlerClient is the client API for CrawlerTextHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerTextHandlerClient interface {
	// Bidirectional streaming where Crawler sends URLs and receives summarized data in response
	StreamUrlSummaries(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UrlRequest, SummarizedDataResponse], error)
}

type crawlerTextHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerTextHandlerClient(cc grpc.ClientConnInterface) CrawlerTextHandlerClient {
	return &crawlerTextHandlerClient{cc}
}

func (c *crawlerTextHandlerClient) StreamUrlSummaries(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UrlRequest, SummarizedDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CrawlerTextHandler_ServiceDesc.Streams[0], CrawlerTextHandler_StreamUrlSummaries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UrlRequest, SummarizedDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CrawlerTextHandler_StreamUrlSummariesClient = grpc.BidiStreamingClient[UrlRequest, SummarizedDataResponse]

// CrawlerTextHandlerServer is the server API for CrawlerTextHandler service.
// All implementations must embed UnimplementedCrawlerTextHandlerServer
// for forward compatibility.
type CrawlerTextHandlerServer interface {
	// Bidirectional streaming where Crawler sends URLs and receives summarized data in response
	StreamUrlSummaries(grpc.BidiStreamingServer[UrlRequest, SummarizedDataResponse]) error
	mustEmbedUnimplementedCrawlerTextHandlerServer()
}

// UnimplementedCrawlerTextHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrawlerTextHandlerServer struct{}

func (UnimplementedCrawlerTextHandlerServer) StreamUrlSummaries(grpc.BidiStreamingServer[UrlRequest, SummarizedDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUrlSummaries not implemented")
}
func (UnimplementedCrawlerTextHandlerServer) mustEmbedUnimplementedCrawlerTextHandlerServer() {}
func (UnimplementedCrawlerTextHandlerServer) testEmbeddedByValue()                            {}

// UnsafeCrawlerTextHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerTextHandlerServer will
// result in compilation errors.
type UnsafeCrawlerTextHandlerServer interface {
	mustEmbedUnimplementedCrawlerTextHandlerServer()
}

func RegisterCrawlerTextHandlerServer(s grpc.ServiceRegistrar, srv CrawlerTextHandlerServer) {
	// If the following call pancis, it indicates UnimplementedCrawlerTextHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrawlerTextHandler_ServiceDesc, srv)
}

func _CrawlerTextHandler_StreamUrlSummaries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrawlerTextHandlerServer).StreamUrlSummaries(&grpc.GenericServerStream[UrlRequest, SummarizedDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CrawlerTextHandler_StreamUrlSummariesServer = grpc.BidiStreamingServer[UrlRequest, SummarizedDataResponse]

// CrawlerTextHandler_ServiceDesc is the grpc.ServiceDesc for CrawlerTextHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlerTextHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CrawlerTextHandler",
	HandlerType: (*CrawlerTextHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUrlSummaries",
			Handler:       _CrawlerTextHandler_StreamUrlSummaries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "crawler_text_handler.proto",
}
